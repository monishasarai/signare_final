{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monisha Sarai\\\\OneDrive\\\\Desktop\\\\project_new\\\\frontend\\\\src\\\\components\\\\VerificationPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Link } from 'react-router-dom';\n// import './VerificationPage.css';\n\n// const VerificationPage = () => {\n//   const [accountNumber, setAccountNumber] = useState('');\n//   const [isAccountValid, setIsAccountValid] = useState(false);\n//   const [image, setImage] = useState(null);\n//   const [verificationStatus, setVerificationStatus] = useState('');\n//   const [error, setError] = useState('');\n\n//   // Function to verify account number with backend\n//   const handleAccountVerification = async () => {\n//     setError('');  // Clear previous error messages\n\n//     if (!accountNumber.trim()) {\n//       setError('Please enter a valid account number.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:5000/api/auth/check-account', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ accountNumber }),\n//       });\n\n//       const result = await response.json();\n\n//       if (response.status === 200) {\n//         setIsAccountValid(true);\n//         setError('');  // Clear error messages on success\n//         alert(result.message); // Show success message\n//       } else {\n//         setIsAccountValid(false);\n//         setError(result.message || 'Invalid account number.');\n//       }\n//     } catch (err) {\n//       console.error('Error verifying account:', err);\n//       setError('An error occurred while verifying the account. Please try again later.');\n//     }\n//   };\n\n//   // Handle signature image upload\n//   const handleImageUpload = (e) => {\n//     setImage(e.target.files[0]);\n//   };\n\n//   // Handle verification\n// //   const handleVerify = async (storedSignature, verifyingSignature) => {\n// //     const formData = new FormData();\n// //     formData.append(\"stored_signature\", storedSignature);\n// //     formData.append(\"verifying_signature\", verifyingSignature);\n\n// //     try {\n// //         const response = await fetch(\"http://localhost:3000/verify\", {\n// //             method: \"POST\",\n// //             body: formData,\n// //         });\n// //         const data = await response.json();\n// //         alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n// //     } catch (error) {\n// //         console.error(\"Error verifying signature:\", error);\n// //     }\n// // };\n// const handleVerify = async () => {\n//   const formData = new FormData();\n//   formData.append(\"stored_signature\", image); // Use the selected image file\n//   formData.append(\"verifying_signature\", image); // Assuming same image for demo\n\n//   try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/signature/verify\", {\n//           method: \"POST\",\n//           body: formData,\n//       });\n//       const data = await response.json();\n//       alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n//   } catch (error) {\n//       console.log(\"Error verifying signature:\", error);\n//   }\n// };\n\n//   return (\n//     <div>\n//       <div className=\"verification-container\">\n//         <div className=\"verification-box\">\n//           <h1 className=\"verification-title\">VERIFICATION</h1>\n//           <p className=\"verification-message\">\n//             Please provide your account details and signature image for verification.\n//           </p>\n\n//           {/* Account Number Input */}\n//           <label className=\"input-label\" htmlFor=\"account-number\">\n//             Enter your account number:\n//           </label>\n//           <input\n//             type=\"text\"\n//             id=\"account-number\"\n//             className=\"input-field\"\n//             value={accountNumber}\n//             onChange={(e) => setAccountNumber(e.target.value)}\n//           />\n//           <button\n//             className=\"go-home-btn\"\n//             onClick={handleAccountVerification}\n//             disabled={!accountNumber.trim()}\n//           >\n//             Verify Account\n//           </button>\n//           {error && <p className=\"error-message\">{error}</p>}\n\n//           {/* Image Upload Field */}\n//           <label className=\"input-label\" htmlFor=\"signature-image\">\n//             Upload your signature:\n//           </label>\n//           <input\n//             type=\"file\"\n//             id=\"signature-image\"\n//             className=\"input-field\"\n//             accept=\"image/*\"\n//             onChange={handleImageUpload}\n//             disabled={!isAccountValid}\n//           />\n\n//           {/* Verify Button */}\n//           <button\n//             className=\"go-home-btn\"\n//             onClick={handleVerify}\n//             disabled={!isAccountValid || !image}\n//           >\n//             Verify\n//           </button>\n\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VerificationPage;\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './VerificationPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerificationPage = () => {\n  _s();\n  const [accountNumber, setAccountNumber] = useState('');\n  const [isAccountValid, setIsAccountValid] = useState(false);\n  const [image, setImage] = useState(null);\n  const [verificationStatus, setVerificationStatus] = useState('');\n  const [error, setError] = useState('');\n  const [storedSignature, setStoredSignature] = useState(null); // To hold the stored signature image\n\n  // Function to verify account number with backend\n  const handleAccountVerification = async () => {\n    setError(''); // Clear previous error messages\n\n    if (!accountNumber.trim()) {\n      setError('Please enter a valid account number.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/check-account', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accountNumber\n        })\n      });\n      const result = await response.json();\n      if (response.status === 200) {\n        setIsAccountValid(true);\n        setError(''); // Clear error messages on success\n        alert(result.message); // Show success message\n\n        // Fetch the stored signature image for the account\n        const signatureResponse = await fetch(`http://localhost:5000/api/account/${accountNumber}/signature`);\n        const signatureData = await signatureResponse.json();\n        if (signatureResponse.status === 200 && signatureData.signature) {\n          // Assuming the stored signature is returned as a URL or Base64 string\n          setStoredSignature(signatureData.signature); // Set stored signature image\n        } else {\n          setError('Stored signature not found for this account.');\n          setIsAccountValid(false);\n        }\n      } else {\n        setIsAccountValid(false);\n        setError(result.message || 'Invalid account number.');\n      }\n    } catch (err) {\n      console.error('Error verifying account:', err);\n      setError('An error occurred while verifying the account. Please try again later.');\n    }\n  };\n\n  // Handle signature image upload\n  const handleImageUpload = e => {\n    setImage(e.target.files[0]);\n  };\n\n  // Handle verification\n  const handleVerify = async () => {\n    if (!storedSignature || !image) {\n      setError('Both stored signature and verifying signature are required for verification.');\n      return;\n    }\n    const formData = new FormData();\n\n    // Append verifying_signature to FormData\n    formData.append(\"verifying_signature\", image);\n\n    // Append stored_signature (fetched from the backend) to FormData\n    // Convert stored signature URL/Base64 string to file if it's a URL/Base64 (if required)\n    if (storedSignature) {\n      const response = await fetch(storedSignature); // Fetch stored signature if it's a URL\n      const blob = await response.blob(); // Convert it to a Blob\n      formData.append(\"stored_signature\", blob, 'stored_signature.png'); // Add to formData\n    }\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/api/signature/verify\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json();\n      alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n    } catch (error) {\n      console.log(\"Error verifying signature:\", error);\n      setError('An error occurred during signature verification. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"verification-title\",\n          children: \"VERIFICATION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"verification-message\",\n          children: \"Please provide your account details and signature image for verification.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          htmlFor: \"account-number\",\n          children: \"Enter your account number:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"account-number\",\n          className: \"input-field\",\n          value: accountNumber,\n          onChange: e => setAccountNumber(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"go-home-btn\",\n          onClick: handleAccountVerification,\n          disabled: !accountNumber.trim(),\n          children: \"Verify Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          htmlFor: \"signature-image\",\n          children: \"Upload your signature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"signature-image\",\n          className: \"input-field\",\n          accept: \"image/*\",\n          onChange: handleImageUpload,\n          disabled: !isAccountValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"go-home-btn\",\n          onClick: handleVerify,\n          disabled: !isAccountValid || !image,\n          children: \"Verify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(VerificationPage, \"WfwZKkMLXqiNCnggHp8L2s1HvVA=\");\n_c = VerificationPage;\nexport default VerificationPage;\nvar _c;\n$RefreshReg$(_c, \"VerificationPage\");","map":{"version":3,"names":["React","useState","Link","jsxDEV","_jsxDEV","VerificationPage","_s","accountNumber","setAccountNumber","isAccountValid","setIsAccountValid","image","setImage","verificationStatus","setVerificationStatus","error","setError","storedSignature","setStoredSignature","handleAccountVerification","trim","response","fetch","method","headers","body","JSON","stringify","result","json","status","alert","message","signatureResponse","signatureData","signature","err","console","handleImageUpload","e","target","files","handleVerify","formData","FormData","append","blob","data","similarity","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","onClick","disabled","accept","_c","$RefreshReg$"],"sources":["C:/Users/Monisha Sarai/OneDrive/Desktop/project_new/frontend/src/components/VerificationPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import './VerificationPage.css';\r\n\r\n// const VerificationPage = () => {\r\n//   const [accountNumber, setAccountNumber] = useState('');\r\n//   const [isAccountValid, setIsAccountValid] = useState(false);\r\n//   const [image, setImage] = useState(null);\r\n//   const [verificationStatus, setVerificationStatus] = useState('');\r\n//   const [error, setError] = useState('');\r\n\r\n//   // Function to verify account number with backend\r\n//   const handleAccountVerification = async () => {\r\n//     setError('');  // Clear previous error messages\r\n\r\n//     if (!accountNumber.trim()) {\r\n//       setError('Please enter a valid account number.');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/api/auth/check-account', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ accountNumber }),\r\n//       });\r\n\r\n//       const result = await response.json();\r\n\r\n//       if (response.status === 200) {\r\n//         setIsAccountValid(true);\r\n//         setError('');  // Clear error messages on success\r\n//         alert(result.message); // Show success message\r\n//       } else {\r\n//         setIsAccountValid(false);\r\n//         setError(result.message || 'Invalid account number.');\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Error verifying account:', err);\r\n//       setError('An error occurred while verifying the account. Please try again later.');\r\n//     }\r\n//   };\r\n\r\n//   // Handle signature image upload\r\n//   const handleImageUpload = (e) => {\r\n//     setImage(e.target.files[0]);\r\n//   };\r\n\r\n//   // Handle verification\r\n// //   const handleVerify = async (storedSignature, verifyingSignature) => {\r\n// //     const formData = new FormData();\r\n// //     formData.append(\"stored_signature\", storedSignature);\r\n// //     formData.append(\"verifying_signature\", verifyingSignature);\r\n\r\n// //     try {\r\n// //         const response = await fetch(\"http://localhost:3000/verify\", {\r\n// //             method: \"POST\",\r\n// //             body: formData,\r\n// //         });\r\n// //         const data = await response.json();\r\n// //         alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n// //     } catch (error) {\r\n// //         console.error(\"Error verifying signature:\", error);\r\n// //     }\r\n// // };\r\n// const handleVerify = async () => {\r\n//   const formData = new FormData();\r\n//   formData.append(\"stored_signature\", image); // Use the selected image file\r\n//   formData.append(\"verifying_signature\", image); // Assuming same image for demo\r\n\r\n//   try {\r\n//       const response = await fetch(\"http://127.0.0.1:5000/api/signature/verify\", {\r\n//           method: \"POST\",\r\n//           body: formData,\r\n//       });\r\n//       const data = await response.json();\r\n//       alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n//   } catch (error) {\r\n//       console.log(\"Error verifying signature:\", error);\r\n//   }\r\n// };\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"verification-container\">\r\n//         <div className=\"verification-box\">\r\n//           <h1 className=\"verification-title\">VERIFICATION</h1>\r\n//           <p className=\"verification-message\">\r\n//             Please provide your account details and signature image for verification.\r\n//           </p>\r\n\r\n//           {/* Account Number Input */}\r\n//           <label className=\"input-label\" htmlFor=\"account-number\">\r\n//             Enter your account number:\r\n//           </label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"account-number\"\r\n//             className=\"input-field\"\r\n//             value={accountNumber}\r\n//             onChange={(e) => setAccountNumber(e.target.value)}\r\n//           />\r\n//           <button\r\n//             className=\"go-home-btn\"\r\n//             onClick={handleAccountVerification}\r\n//             disabled={!accountNumber.trim()}\r\n//           >\r\n//             Verify Account\r\n//           </button>\r\n//           {error && <p className=\"error-message\">{error}</p>}\r\n\r\n//           {/* Image Upload Field */}\r\n//           <label className=\"input-label\" htmlFor=\"signature-image\">\r\n//             Upload your signature:\r\n//           </label>\r\n//           <input\r\n//             type=\"file\"\r\n//             id=\"signature-image\"\r\n//             className=\"input-field\"\r\n//             accept=\"image/*\"\r\n//             onChange={handleImageUpload}\r\n//             disabled={!isAccountValid}\r\n//           />\r\n\r\n//           {/* Verify Button */}\r\n//           <button\r\n//             className=\"go-home-btn\"\r\n//             onClick={handleVerify}\r\n//             disabled={!isAccountValid || !image}\r\n//           >\r\n//             Verify\r\n//           </button>\r\n\r\n         \r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VerificationPage;\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './VerificationPage.css';\r\n\r\nconst VerificationPage = () => {\r\n  const [accountNumber, setAccountNumber] = useState('');\r\n  const [isAccountValid, setIsAccountValid] = useState(false);\r\n  const [image, setImage] = useState(null);\r\n  const [verificationStatus, setVerificationStatus] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [storedSignature, setStoredSignature] = useState(null); // To hold the stored signature image\r\n\r\n  // Function to verify account number with backend\r\n  const handleAccountVerification = async () => {\r\n    setError('');  // Clear previous error messages\r\n\r\n    if (!accountNumber.trim()) {\r\n      setError('Please enter a valid account number.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/auth/check-account', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ accountNumber }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.status === 200) {\r\n        setIsAccountValid(true);\r\n        setError('');  // Clear error messages on success\r\n        alert(result.message); // Show success message\r\n        \r\n        // Fetch the stored signature image for the account\r\n        const signatureResponse = await fetch(`http://localhost:5000/api/account/${accountNumber}/signature`);\r\n        const signatureData = await signatureResponse.json();\r\n\r\n        if (signatureResponse.status === 200 && signatureData.signature) {\r\n          // Assuming the stored signature is returned as a URL or Base64 string\r\n          setStoredSignature(signatureData.signature); // Set stored signature image\r\n        } else {\r\n          setError('Stored signature not found for this account.');\r\n          setIsAccountValid(false);\r\n        }\r\n      } else {\r\n        setIsAccountValid(false);\r\n        setError(result.message || 'Invalid account number.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error verifying account:', err);\r\n      setError('An error occurred while verifying the account. Please try again later.');\r\n    }\r\n  };\r\n\r\n  // Handle signature image upload\r\n  const handleImageUpload = (e) => {\r\n    setImage(e.target.files[0]);\r\n  };\r\n\r\n  // Handle verification\r\n  const handleVerify = async () => {\r\n    if (!storedSignature || !image) {\r\n      setError('Both stored signature and verifying signature are required for verification.');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    \r\n    // Append verifying_signature to FormData\r\n    formData.append(\"verifying_signature\", image); \r\n\r\n    // Append stored_signature (fetched from the backend) to FormData\r\n    // Convert stored signature URL/Base64 string to file if it's a URL/Base64 (if required)\r\n    if (storedSignature) {\r\n      const response = await fetch(storedSignature); // Fetch stored signature if it's a URL\r\n      const blob = await response.blob(); // Convert it to a Blob\r\n      formData.append(\"stored_signature\", blob, 'stored_signature.png'); // Add to formData\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/api/signature/verify\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      const data = await response.json();\r\n      alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n    } catch (error) {\r\n      console.log(\"Error verifying signature:\", error);\r\n      setError('An error occurred during signature verification. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"verification-container\">\r\n        <div className=\"verification-box\">\r\n          <h1 className=\"verification-title\">VERIFICATION</h1>\r\n          <p className=\"verification-message\">\r\n            Please provide your account details and signature image for verification.\r\n          </p>\r\n\r\n          {/* Account Number Input */}\r\n          <label className=\"input-label\" htmlFor=\"account-number\">\r\n            Enter your account number:\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"account-number\"\r\n            className=\"input-field\"\r\n            value={accountNumber}\r\n            onChange={(e) => setAccountNumber(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"go-home-btn\"\r\n            onClick={handleAccountVerification}\r\n            disabled={!accountNumber.trim()}\r\n          >\r\n            Verify Account\r\n          </button>\r\n          {error && <p className=\"error-message\">{error}</p>}\r\n\r\n          {/* Image Upload Field */}\r\n          <label className=\"input-label\" htmlFor=\"signature-image\">\r\n            Upload your signature:\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"signature-image\"\r\n            className=\"input-field\"\r\n            accept=\"image/*\"\r\n            onChange={handleImageUpload}\r\n            disabled={!isAccountValid}\r\n          />\r\n\r\n          {/* Verify Button */}\r\n          <button\r\n            className=\"go-home-btn\"\r\n            onClick={handleVerify}\r\n            disabled={!isAccountValid || !image}\r\n          >\r\n            Verify\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerificationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}