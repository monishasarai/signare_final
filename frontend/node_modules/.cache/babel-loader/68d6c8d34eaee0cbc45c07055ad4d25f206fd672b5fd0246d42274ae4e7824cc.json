{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monisha Sarai\\\\OneDrive\\\\Desktop\\\\project_new\\\\frontend\\\\src\\\\components\\\\VerificationPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Link } from 'react-router-dom';\n// import './VerificationPage.css';\n\n// const VerificationPage = () => {\n//   const [accountNumber, setAccountNumber] = useState('');\n//   const [isAccountValid, setIsAccountValid] = useState(false);\n//   const [image, setImage] = useState(null);\n//   const [verificationStatus, setVerificationStatus] = useState('');\n//   const [error, setError] = useState('');\n\n//   // Function to verify account number with backend\n//   const handleAccountVerification = async () => {\n//     setError('');  // Clear previous error messages\n\n//     if (!accountNumber.trim()) {\n//       setError('Please enter a valid account number.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:5000/api/auth/check-account', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ accountNumber }),\n//       });\n\n//       const result = await response.json();\n\n//       if (response.status === 200) {\n//         setIsAccountValid(true);\n//         setError('');  // Clear error messages on success\n//         alert(result.message); // Show success message\n//       } else {\n//         setIsAccountValid(false);\n//         setError(result.message || 'Invalid account number.');\n//       }\n//     } catch (err) {\n//       console.error('Error verifying account:', err);\n//       setError('An error occurred while verifying the account. Please try again later.');\n//     }\n//   };\n\n//   // Handle signature image upload\n//   const handleImageUpload = (e) => {\n//     setImage(e.target.files[0]);\n//   };\n\n//   // Handle verification\n// //   const handleVerify = async (storedSignature, verifyingSignature) => {\n// //     const formData = new FormData();\n// //     formData.append(\"stored_signature\", storedSignature);\n// //     formData.append(\"verifying_signature\", verifyingSignature);\n\n// //     try {\n// //         const response = await fetch(\"http://localhost:3000/verify\", {\n// //             method: \"POST\",\n// //             body: formData,\n// //         });\n// //         const data = await response.json();\n// //         alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n// //     } catch (error) {\n// //         console.error(\"Error verifying signature:\", error);\n// //     }\n// // };\n// const handleVerify = async () => {\n//   const formData = new FormData();\n//   formData.append(\"stored_signature\", image); // Use the selected image file\n//   formData.append(\"verifying_signature\", image); // Assuming same image for demo\n\n//   try {\n//       const response = await fetch(\"http://127.0.0.1:5000/api/signature/verify\", {\n//           method: \"POST\",\n//           body: formData,\n//       });\n//       const data = await response.json();\n//       alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n//   } catch (error) {\n//       console.log(\"Error verifying signature:\", error);\n//   }\n// };\n\n//   return (\n//     <div>\n//       <div className=\"verification-container\">\n//         <div className=\"verification-box\">\n//           <h1 className=\"verification-title\">VERIFICATION</h1>\n//           <p className=\"verification-message\">\n//             Please provide your account details and signature image for verification.\n//           </p>\n\n//           {/* Account Number Input */}\n//           <label className=\"input-label\" htmlFor=\"account-number\">\n//             Enter your account number:\n//           </label>\n//           <input\n//             type=\"text\"\n//             id=\"account-number\"\n//             className=\"input-field\"\n//             value={accountNumber}\n//             onChange={(e) => setAccountNumber(e.target.value)}\n//           />\n//           <button\n//             className=\"go-home-btn\"\n//             onClick={handleAccountVerification}\n//             disabled={!accountNumber.trim()}\n//           >\n//             Verify Account\n//           </button>\n//           {error && <p className=\"error-message\">{error}</p>}\n\n//           {/* Image Upload Field */}\n//           <label className=\"input-label\" htmlFor=\"signature-image\">\n//             Upload your signature:\n//           </label>\n//           <input\n//             type=\"file\"\n//             id=\"signature-image\"\n//             className=\"input-field\"\n//             accept=\"image/*\"\n//             onChange={handleImageUpload}\n//             disabled={!isAccountValid}\n//           />\n\n//           {/* Verify Button */}\n//           <button\n//             className=\"go-home-btn\"\n//             onClick={handleVerify}\n//             disabled={!isAccountValid || !image}\n//           >\n//             Verify\n//           </button>\n\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VerificationPage;\nimport React, { useState } from 'react';\nimport './VerificationPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerificationPage = () => {\n  _s();\n  const [accountNumber, setAccountNumber] = useState('');\n  const [isAccountValid, setIsAccountValid] = useState(false);\n  const [image, setImage] = useState(null);\n  const [storedSignatureBase64, setStoredSignatureBase64] = useState('');\n  const [verificationResult, setVerificationResult] = useState('');\n  const [error, setError] = useState('');\n\n  // Function to verify account number with backend and fetch stored image\n  const handleAccountVerification = async () => {\n    setError(''); // Clear previous error messages\n\n    if (!accountNumber.trim()) {\n      setError('Please enter a valid account number.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/check-account', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accountNumber\n        })\n      });\n      const result = await response.json();\n      if (response.status === 200) {\n        setIsAccountValid(true);\n        setError(''); // Clear error messages on success\n        alert(result.message); // Show success message\n      } else {\n        setIsAccountValid(false);\n        setError(result.message || 'Invalid account number.');\n      }\n    } catch (err) {\n      console.error('Error verifying account:', err);\n      setError('An error occurred while verifying the account. Please try again later.');\n    }\n  };\n\n  // const handleAccountVerification = async () => {\n  //   setError('');  // Clear previous error messages\n\n  //   if (!accountNumber.trim()) {\n  //     setError('Please enter a valid account number.');\n  //     return;\n  //   }\n\n  //   try {\n  //     // Verify account and fetch the stored image from the backend\n  //     const response = await fetch('http://localhost:5000/api/signature/verify-account', {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({ accountNumber }),\n  //     });\n\n  //     const result = await response.json();\n\n  //     if (response.status === 200) {\n  //       setIsAccountValid(true);\n  //       setStoredSignatureBase64(result.signature);  // Set stored base64 image\n  //       setError('');  // Clear error messages on success\n  //     } else {\n  //       setIsAccountValid(false);\n  //       setError(result.message || 'Invalid account number.');\n  //     }\n  //   } catch (err) {\n  //     console.error('Error verifying account:', err);\n  //     setError('An error occurred while verifying the account. Please try again later.');\n  //   }\n  // };\n\n  // Handle signature image upload and convert to base64\n  const handleImageUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setImage(reader.result.split(',')[1]); // Extract base64 part of the image\n    };\n    if (file) {\n      reader.readAsDataURL(file); // Convert image to base64\n    }\n  };\n\n  // Handle verification of signature\n  const handleVerify = async () => {\n    const formData = new FormData();\n    formData.append('stored_signature', storedSignatureBase64); // Base64 stored signature\n    formData.append('verifying_signature', image); // Base64 verifying signature from upload\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/signature/verify', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      setVerificationResult(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n    } catch (error) {\n      console.log('Error verifying signature:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"verification-title\",\n          children: \"VERIFICATION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"verification-message\",\n          children: \"Please provide your account details and signature image for verification.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          htmlFor: \"account-number\",\n          children: \"Enter your account number:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"account-number\",\n          className: \"input-field\",\n          value: accountNumber,\n          onChange: e => setAccountNumber(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"go-home-btn\",\n          onClick: handleAccountVerification,\n          disabled: !accountNumber.trim(),\n          children: \"Verify Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          htmlFor: \"signature-image\",\n          children: \"Upload your signature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"signature-image\",\n          className: \"input-field\",\n          accept: \"image/*\",\n          onChange: handleImageUpload,\n          disabled: !isAccountValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"go-home-btn\",\n          onClick: handleVerify,\n          disabled: !isAccountValid || !image,\n          children: \"Verify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), verificationResult && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: verificationResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s(VerificationPage, \"C6gvlALGZVIFb6f4v1LI/05PSD4=\");\n_c = VerificationPage;\nexport default VerificationPage;\nvar _c;\n$RefreshReg$(_c, \"VerificationPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","VerificationPage","_s","accountNumber","setAccountNumber","isAccountValid","setIsAccountValid","image","setImage","storedSignatureBase64","setStoredSignatureBase64","verificationResult","setVerificationResult","error","setError","handleAccountVerification","trim","response","fetch","method","headers","body","JSON","stringify","result","json","status","alert","message","err","console","handleImageUpload","e","file","target","files","reader","FileReader","onloadend","split","readAsDataURL","handleVerify","formData","FormData","append","data","similarity","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","onClick","disabled","accept","_c","$RefreshReg$"],"sources":["C:/Users/Monisha Sarai/OneDrive/Desktop/project_new/frontend/src/components/VerificationPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import './VerificationPage.css';\r\n\r\n// const VerificationPage = () => {\r\n//   const [accountNumber, setAccountNumber] = useState('');\r\n//   const [isAccountValid, setIsAccountValid] = useState(false);\r\n//   const [image, setImage] = useState(null);\r\n//   const [verificationStatus, setVerificationStatus] = useState('');\r\n//   const [error, setError] = useState('');\r\n\r\n//   // Function to verify account number with backend\r\n//   const handleAccountVerification = async () => {\r\n//     setError('');  // Clear previous error messages\r\n\r\n//     if (!accountNumber.trim()) {\r\n//       setError('Please enter a valid account number.');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/api/auth/check-account', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ accountNumber }),\r\n//       });\r\n\r\n//       const result = await response.json();\r\n\r\n//       if (response.status === 200) {\r\n//         setIsAccountValid(true);\r\n//         setError('');  // Clear error messages on success\r\n//         alert(result.message); // Show success message\r\n//       } else {\r\n//         setIsAccountValid(false);\r\n//         setError(result.message || 'Invalid account number.');\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Error verifying account:', err);\r\n//       setError('An error occurred while verifying the account. Please try again later.');\r\n//     }\r\n//   };\r\n\r\n//   // Handle signature image upload\r\n//   const handleImageUpload = (e) => {\r\n//     setImage(e.target.files[0]);\r\n//   };\r\n\r\n//   // Handle verification\r\n// //   const handleVerify = async (storedSignature, verifyingSignature) => {\r\n// //     const formData = new FormData();\r\n// //     formData.append(\"stored_signature\", storedSignature);\r\n// //     formData.append(\"verifying_signature\", verifyingSignature);\r\n\r\n// //     try {\r\n// //         const response = await fetch(\"http://localhost:3000/verify\", {\r\n// //             method: \"POST\",\r\n// //             body: formData,\r\n// //         });\r\n// //         const data = await response.json();\r\n// //         alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n// //     } catch (error) {\r\n// //         console.error(\"Error verifying signature:\", error);\r\n// //     }\r\n// // };\r\n// const handleVerify = async () => {\r\n//   const formData = new FormData();\r\n//   formData.append(\"stored_signature\", image); // Use the selected image file\r\n//   formData.append(\"verifying_signature\", image); // Assuming same image for demo\r\n\r\n//   try {\r\n//       const response = await fetch(\"http://127.0.0.1:5000/api/signature/verify\", {\r\n//           method: \"POST\",\r\n//           body: formData,\r\n//       });\r\n//       const data = await response.json();\r\n//       alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n//   } catch (error) {\r\n//       console.log(\"Error verifying signature:\", error);\r\n//   }\r\n// };\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"verification-container\">\r\n//         <div className=\"verification-box\">\r\n//           <h1 className=\"verification-title\">VERIFICATION</h1>\r\n//           <p className=\"verification-message\">\r\n//             Please provide your account details and signature image for verification.\r\n//           </p>\r\n\r\n//           {/* Account Number Input */}\r\n//           <label className=\"input-label\" htmlFor=\"account-number\">\r\n//             Enter your account number:\r\n//           </label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"account-number\"\r\n//             className=\"input-field\"\r\n//             value={accountNumber}\r\n//             onChange={(e) => setAccountNumber(e.target.value)}\r\n//           />\r\n//           <button\r\n//             className=\"go-home-btn\"\r\n//             onClick={handleAccountVerification}\r\n//             disabled={!accountNumber.trim()}\r\n//           >\r\n//             Verify Account\r\n//           </button>\r\n//           {error && <p className=\"error-message\">{error}</p>}\r\n\r\n//           {/* Image Upload Field */}\r\n//           <label className=\"input-label\" htmlFor=\"signature-image\">\r\n//             Upload your signature:\r\n//           </label>\r\n//           <input\r\n//             type=\"file\"\r\n//             id=\"signature-image\"\r\n//             className=\"input-field\"\r\n//             accept=\"image/*\"\r\n//             onChange={handleImageUpload}\r\n//             disabled={!isAccountValid}\r\n//           />\r\n\r\n//           {/* Verify Button */}\r\n//           <button\r\n//             className=\"go-home-btn\"\r\n//             onClick={handleVerify}\r\n//             disabled={!isAccountValid || !image}\r\n//           >\r\n//             Verify\r\n//           </button>\r\n\r\n         \r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VerificationPage;\r\nimport React, { useState } from 'react';\r\nimport './VerificationPage.css';\r\n\r\nconst VerificationPage = () => {\r\n  const [accountNumber, setAccountNumber] = useState('');\r\n  const [isAccountValid, setIsAccountValid] = useState(false);\r\n  const [image, setImage] = useState(null);\r\n  const [storedSignatureBase64, setStoredSignatureBase64] = useState('');\r\n  const [verificationResult, setVerificationResult] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  // Function to verify account number with backend and fetch stored image\r\n  const handleAccountVerification = async () => {\r\n    setError('');  // Clear previous error messages\r\n\r\n    if (!accountNumber.trim()) {\r\n        setError('Please enter a valid account number.');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await fetch('http://localhost:5000/api/auth/check-account', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ accountNumber }),\r\n        });\r\n\r\n        const result = await response.json();\r\n\r\n        if (response.status === 200) {\r\n            setIsAccountValid(true);\r\n            setError('');  // Clear error messages on success\r\n            alert(result.message); // Show success message\r\n        } else {\r\n            setIsAccountValid(false);\r\n            setError(result.message || 'Invalid account number.');\r\n        }\r\n    } catch (err) {\r\n        console.error('Error verifying account:', err);\r\n        setError('An error occurred while verifying the account. Please try again later.');\r\n    }\r\n};\r\n\r\n  // const handleAccountVerification = async () => {\r\n  //   setError('');  // Clear previous error messages\r\n\r\n  //   if (!accountNumber.trim()) {\r\n  //     setError('Please enter a valid account number.');\r\n  //     return;\r\n  //   }\r\n\r\n  //   try {\r\n  //     // Verify account and fetch the stored image from the backend\r\n  //     const response = await fetch('http://localhost:5000/api/signature/verify-account', {\r\n  //       method: 'POST',\r\n  //       headers: { 'Content-Type': 'application/json' },\r\n  //       body: JSON.stringify({ accountNumber }),\r\n  //     });\r\n\r\n  //     const result = await response.json();\r\n\r\n  //     if (response.status === 200) {\r\n  //       setIsAccountValid(true);\r\n  //       setStoredSignatureBase64(result.signature);  // Set stored base64 image\r\n  //       setError('');  // Clear error messages on success\r\n  //     } else {\r\n  //       setIsAccountValid(false);\r\n  //       setError(result.message || 'Invalid account number.');\r\n  //     }\r\n  //   } catch (err) {\r\n  //     console.error('Error verifying account:', err);\r\n  //     setError('An error occurred while verifying the account. Please try again later.');\r\n  //   }\r\n  // };\r\n\r\n  // Handle signature image upload and convert to base64\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      setImage(reader.result.split(',')[1]); // Extract base64 part of the image\r\n    };\r\n    if (file) {\r\n      reader.readAsDataURL(file); // Convert image to base64\r\n    }\r\n  };\r\n\r\n  // Handle verification of signature\r\n  const handleVerify = async () => {\r\n    const formData = new FormData();\r\n    formData.append('stored_signature', storedSignatureBase64);  // Base64 stored signature\r\n    formData.append('verifying_signature', image);  // Base64 verifying signature from upload\r\n\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:5000/api/signature/verify', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n      const data = await response.json();\r\n      setVerificationResult(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n    } catch (error) {\r\n      console.log('Error verifying signature:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"verification-container\">\r\n        <div className=\"verification-box\">\r\n          <h1 className=\"verification-title\">VERIFICATION</h1>\r\n          <p className=\"verification-message\">\r\n            Please provide your account details and signature image for verification.\r\n          </p>\r\n\r\n          {/* Account Number Input */}\r\n          <label className=\"input-label\" htmlFor=\"account-number\">\r\n            Enter your account number:\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"account-number\"\r\n            className=\"input-field\"\r\n            value={accountNumber}\r\n            onChange={(e) => setAccountNumber(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"go-home-btn\"\r\n            onClick={handleAccountVerification}\r\n            disabled={!accountNumber.trim()}\r\n          >\r\n            Verify Account\r\n          </button>\r\n          {error && <p className=\"error-message\">{error}</p>}\r\n\r\n          {/* Image Upload Field */}\r\n          <label className=\"input-label\" htmlFor=\"signature-image\">\r\n            Upload your signature:\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"signature-image\"\r\n            className=\"input-field\"\r\n            accept=\"image/*\"\r\n            onChange={handleImageUpload}\r\n            disabled={!isAccountValid}\r\n          />\r\n\r\n          {/* Verify Button */}\r\n          <button\r\n            className=\"go-home-btn\"\r\n            onClick={handleVerify}\r\n            disabled={!isAccountValid || !image}\r\n          >\r\n            Verify\r\n          </button>\r\n\r\n          {/* Display verification result */}\r\n          {verificationResult && <p>{verificationResult}</p>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerificationPage;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtE,MAAM,CAACa,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMiB,yBAAyB,GAAG,MAAAA,CAAA,KAAY;IAC5CD,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;IAEf,IAAI,CAACX,aAAa,CAACa,IAAI,CAAC,CAAC,EAAE;MACvBF,QAAQ,CAAC,sCAAsC,CAAC;MAChD;IACJ;IAEA,IAAI;MACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,8CAA8C,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEpB;QAAc,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMqB,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAEpC,IAAIR,QAAQ,CAACS,MAAM,KAAK,GAAG,EAAE;QACzBpB,iBAAiB,CAAC,IAAI,CAAC;QACvBQ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;QACfa,KAAK,CAACH,MAAM,CAACI,OAAO,CAAC,CAAC,CAAC;MAC3B,CAAC,MAAM;QACHtB,iBAAiB,CAAC,KAAK,CAAC;QACxBQ,QAAQ,CAACU,MAAM,CAACI,OAAO,IAAI,yBAAyB,CAAC;MACzD;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVC,OAAO,CAACjB,KAAK,CAAC,0BAA0B,EAAEgB,GAAG,CAAC;MAC9Cf,QAAQ,CAAC,wEAAwE,CAAC;IACtF;EACJ,CAAC;;EAEC;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMiB,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;MACvB9B,QAAQ,CAAC4B,MAAM,CAACZ,MAAM,CAACe,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC;IACD,IAAIN,IAAI,EAAE;MACRG,MAAM,CAACI,aAAa,CAACP,IAAI,CAAC,CAAC,CAAC;IAC9B;EACF,CAAC;;EAED;EACA,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,kBAAkB,EAAEnC,qBAAqB,CAAC,CAAC,CAAE;IAC7DiC,QAAQ,CAACE,MAAM,CAAC,qBAAqB,EAAErC,KAAK,CAAC,CAAC,CAAE;;IAEhD,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdE,IAAI,EAAEqB;MACR,CAAC,CAAC;MACF,MAAMG,IAAI,GAAG,MAAM5B,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClCb,qBAAqB,CAAC,WAAWiC,IAAI,CAACrB,MAAM,iBAAiBqB,IAAI,CAACC,UAAU,EAAE,CAAC;IACjF,CAAC,CAAC,OAAOjC,KAAK,EAAE;MACdiB,OAAO,CAACiB,GAAG,CAAC,4BAA4B,EAAElC,KAAK,CAAC;IAClD;EACF,CAAC;EAED,oBACEb,OAAA;IAAAgD,QAAA,eACEhD,OAAA;MAAKiD,SAAS,EAAC,wBAAwB;MAAAD,QAAA,eACrChD,OAAA;QAAKiD,SAAS,EAAC,kBAAkB;QAAAD,QAAA,gBAC/BhD,OAAA;UAAIiD,SAAS,EAAC,oBAAoB;UAAAD,QAAA,EAAC;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpDrD,OAAA;UAAGiD,SAAS,EAAC,sBAAsB;UAAAD,QAAA,EAAC;QAEpC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAGJrD,OAAA;UAAOiD,SAAS,EAAC,aAAa;UAACK,OAAO,EAAC,gBAAgB;UAAAN,QAAA,EAAC;QAExD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACRrD,OAAA;UACEuD,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,gBAAgB;UACnBP,SAAS,EAAC,aAAa;UACvBQ,KAAK,EAAEtD,aAAc;UACrBuD,QAAQ,EAAG1B,CAAC,IAAK5B,gBAAgB,CAAC4B,CAAC,CAACE,MAAM,CAACuB,KAAK;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC,eACFrD,OAAA;UACEiD,SAAS,EAAC,aAAa;UACvBU,OAAO,EAAE5C,yBAA0B;UACnC6C,QAAQ,EAAE,CAACzD,aAAa,CAACa,IAAI,CAAC,CAAE;UAAAgC,QAAA,EACjC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACRxC,KAAK,iBAAIb,OAAA;UAAGiD,SAAS,EAAC,eAAe;UAAAD,QAAA,EAAEnC;QAAK;UAAAqC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAGlDrD,OAAA;UAAOiD,SAAS,EAAC,aAAa;UAACK,OAAO,EAAC,iBAAiB;UAAAN,QAAA,EAAC;QAEzD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACRrD,OAAA;UACEuD,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,iBAAiB;UACpBP,SAAS,EAAC,aAAa;UACvBY,MAAM,EAAC,SAAS;UAChBH,QAAQ,EAAE3B,iBAAkB;UAC5B6B,QAAQ,EAAE,CAACvD;QAAe;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eAGFrD,OAAA;UACEiD,SAAS,EAAC,aAAa;UACvBU,OAAO,EAAElB,YAAa;UACtBmB,QAAQ,EAAE,CAACvD,cAAc,IAAI,CAACE,KAAM;UAAAyC,QAAA,EACrC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAGR1C,kBAAkB,iBAAIX,OAAA;UAAAgD,QAAA,EAAIrC;QAAkB;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnD,EAAA,CA/JID,gBAAgB;AAAA6D,EAAA,GAAhB7D,gBAAgB;AAiKtB,eAAeA,gBAAgB;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}