{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monisha Sarai\\\\OneDrive\\\\Desktop\\\\project_new\\\\frontend\\\\src\\\\components\\\\VerificationPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Link } from 'react-router-dom';\n// // import { useNavigate } from 'react-router-dom';\n\n// import './VerificationPage.css';\n// // const navigate = useNavigate();\n\n// const VerificationPage = () => {\n//   const [accountNumber, setAccountNumber] = useState('');\n//   const [isAccountValid, setIsAccountValid] = useState(false);\n//   const [image, setImage] = useState(null);\n//   const [verificationStatus, setVerificationStatus] = useState('');\n//   const [error, setError] = useState('');\n\n//   // Function to verify account number with backend\n//   const handleAccountVerification = async () => {\n//     setError('');  // Clear previous error messages\n\n//     if (!accountNumber.trim()) {\n//       setError('Please enter a valid account number.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:5000/api/auth/check-account', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ accountNumber }),\n//       });\n\n//       const result = await response.json();\n\n//       if (response.status === 200) {\n//         setIsAccountValid(true);\n//         setError('');  // Clear error messages on success\n//         alert(result.message); // Show success message\n//       } else {\n//         setIsAccountValid(false);\n//         setError(result.message || 'Invalid account number.');\n//       }\n//     } catch (err) {\n//       console.error('Error verifying account:', err);\n//       setError('An error occurred while verifying the account. Please try again later.');\n//     }\n//   };\n\n//   // Handle signature image upload\n//   const handleImageUpload = (e) => {\n//     setImage(e.target.files[0]);\n//   };\n\n//   // Handle verification\n// //   const handleVerify = async (storedSignature, verifyingSignature) => {\n// //     const formData = new FormData();\n// //     formData.append(\"stored_signature\", storedSignature);\n// //     formData.append(\"verifying_signature\", verifyingSignature);\n\n// //     try {\n// //         const response = await fetch(\"http://localhost:3000/verify\", {\n// //             method: \"POST\",\n// //             body: formData,\n// //         });\n// //         const data = await response.json();\n// //         alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n// //     } catch (error) {\n// //         console.error(\"Error verifying signature:\", error);\n// //     }\n// // };\n// // const handleVerify = async () => {\n// //   const formData = new FormData();\n// //   formData.append(\"stored_signature\", image); // Use the selected image file\n// //   formData.append(\"verifying_signature\", image); // Assuming same image for demo\n\n// //   try {\n// //       const response = await fetch(\"http://127.0.0.1:5000/api/signature/verify\", {\n// //           method: \"POST\",\n// //           body: formData,\n// //       });\n// //       const data = await response.json();\n// //       alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n// //   } catch (error) {\n// //       console.log(\"Error verifying signature:\", error);\n// //   }\n// // };\n// router.post('/verify', async (req, res) => {\n//   const { accountNumber, signature } = req.body;\n\n//   try {\n//       // Fetch the stored signature for the account number from the database\n//       const storedSignatureRecord = await Signature.findOne({ accountNumber });\n//       if (!storedSignatureRecord) {\n//           return res.status(404).send({ message: 'Account not found' });\n//       }\n\n//       // Decode stored signature (base64) to a temporary file\n//       const storedSignaturePath = `temp_stored_${Date.now()}.jpg`;\n//       fs.writeFileSync(storedSignaturePath, Buffer.from(storedSignatureRecord.signature, 'base64'));\n\n//       // Decode verifying signature (base64) to a temporary file\n//       const verifyingSignaturePath = `temp_verifying_${Date.now()}.jpg`;\n//       fs.writeFileSync(verifyingSignaturePath, Buffer.from(signature, 'base64'));\n\n//       // Send files to Python microservice for verification\n//       const formData = new FormData();\n//       formData.append('accountNumber', accountNumber); // Optional: Send account number\n//       formData.append('stored_signature', fs.createReadStream(storedSignaturePath));\n//       formData.append('verifying_signature', fs.createReadStream(verifyingSignaturePath));\n\n//       const pythonResponse = await axios.post('http://localhost:5000/api/signature/verify', formData, {\n//           headers: formData.getHeaders(),\n//       });\n\n//       // Cleanup temporary files\n//       fs.unlinkSync(storedSignaturePath);\n//       fs.unlinkSync(verifyingSignaturePath);\n\n//       // Send verification result back to the client\n//       res.status(200).send(pythonResponse.data);\n//   } catch (err) {\n//       console.error(err);\n//       res.status(500).send({ message: 'Error during verification', error: err.message });\n//   }\n// });\n\n//   return (\n//     <div>\n//       <div className=\"verification-container\">\n//         <div className=\"verification-box\">\n//           <h1 className=\"verification-title\">VERIFICATION</h1>\n//           <p className=\"verification-message\">\n//             Please provide your account details and signature image for verification.\n//           </p>\n\n//           {/* Account Number Input */}\n//           <label className=\"input-label\" htmlFor=\"account-number\">\n//             Enter your account number:\n//           </label>\n//           <input\n//             type=\"text\"\n//             id=\"account-number\"\n//             className=\"input-field\"\n//             value={accountNumber}\n//             onChange={(e) => setAccountNumber(e.target.value)}\n//           />\n//           <button\n//             className=\"go-home-btn\"\n//             onClick={handleAccountVerification}\n//             disabled={!accountNumber.trim()}\n//           >\n//             Verify Account\n//           </button>\n//           {error && <p className=\"error-message\">{error}</p>}\n\n//           {/* Image Upload Field */}\n//           <label className=\"input-label\" htmlFor=\"signature-image\">\n//             Upload your signature:\n//           </label>\n//           <input\n//             type=\"file\"\n//             id=\"signature-image\"\n//             className=\"input-field\"\n//             accept=\"image/*\"\n//             onChange={handleImageUpload}\n//             disabled={!isAccountValid}\n//           />\n\n//           {/* Verify Button */}\n//           <button\n//             className=\"go-home-btn\"\n//             onClick={handleVerify}\n//             disabled={!isAccountValid || !image}\n//           >\n//             Verify\n//           </button>\n\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VerificationPage;\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './VerificationPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerificationPage = () => {\n  _s();\n  const [accountNumber, setAccountNumber] = useState('');\n  const [image, setImage] = useState(null);\n  const [verificationStatus, setVerificationStatus] = useState('');\n  const navigate = useNavigate(); // Initialize useNavigate\n\n  const handleImageUpload = e => {\n    setImage(e.target.files[0]);\n  };\n  const handleVerify = async () => {\n    if (!accountNumber.trim()) {\n      alert(\"Please provide a valid account number.\");\n      return;\n    }\n    if (!image) {\n      alert(\"Please upload a signature image.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"accountNumber\", accountNumber); // Attach account number\n    formData.append(\"verifying_signature\", image); // Attach the uploaded signature image\n\n    try {\n      const response = await fetch(\"http://localhost:5000/api/signature/verify\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setVerificationStatus(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n        navigate('/verification-success'); // Navigate to a success page or another route\n      } else {\n        setVerificationStatus(`Error: ${data.error || \"Verification failed.\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error verifying signature:\", error);\n      setVerificationStatus(\"An error occurred during verification.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"verification-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"verification-title\",\n        children: \"VERIFICATION\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"verification-message\",\n        children: \"Please provide your account details and signature image for verification.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        htmlFor: \"account-number\",\n        children: \"Enter your account number:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"account-number\",\n        className: \"input-field\",\n        value: accountNumber,\n        onChange: e => setAccountNumber(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        htmlFor: \"signature-image\",\n        children: \"Upload your signature:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"signature-image\",\n        className: \"input-field\",\n        accept: \"image/*\",\n        onChange: handleImageUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"go-home-btn\",\n        onClick: handleVerify,\n        disabled: !accountNumber.trim() || !image,\n        children: \"Verify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), verificationStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"verification-result\",\n        children: verificationStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n};\n_s(VerificationPage, \"uxhOxvGRa6/17RoHSBg46Zyf2nM=\", false, function () {\n  return [useNavigate];\n});\n_c = VerificationPage;\nexport default VerificationPage;\nvar _c;\n$RefreshReg$(_c, \"VerificationPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","VerificationPage","_s","accountNumber","setAccountNumber","image","setImage","verificationStatus","setVerificationStatus","navigate","handleImageUpload","e","target","files","handleVerify","trim","alert","formData","FormData","append","response","fetch","method","body","data","json","ok","result","similarity","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","accept","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Monisha Sarai/OneDrive/Desktop/project_new/frontend/src/components/VerificationPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// // import { useNavigate } from 'react-router-dom';\r\n\r\n// import './VerificationPage.css';\r\n// // const navigate = useNavigate();\r\n\r\n// const VerificationPage = () => {\r\n//   const [accountNumber, setAccountNumber] = useState('');\r\n//   const [isAccountValid, setIsAccountValid] = useState(false);\r\n//   const [image, setImage] = useState(null);\r\n//   const [verificationStatus, setVerificationStatus] = useState('');\r\n//   const [error, setError] = useState('');\r\n\r\n//   // Function to verify account number with backend\r\n//   const handleAccountVerification = async () => {\r\n//     setError('');  // Clear previous error messages\r\n\r\n//     if (!accountNumber.trim()) {\r\n//       setError('Please enter a valid account number.');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/api/auth/check-account', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ accountNumber }),\r\n//       });\r\n\r\n//       const result = await response.json();\r\n\r\n//       if (response.status === 200) {\r\n//         setIsAccountValid(true);\r\n//         setError('');  // Clear error messages on success\r\n//         alert(result.message); // Show success message\r\n//       } else {\r\n//         setIsAccountValid(false);\r\n//         setError(result.message || 'Invalid account number.');\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Error verifying account:', err);\r\n//       setError('An error occurred while verifying the account. Please try again later.');\r\n//     }\r\n//   };\r\n\r\n//   // Handle signature image upload\r\n//   const handleImageUpload = (e) => {\r\n//     setImage(e.target.files[0]);\r\n//   };\r\n\r\n//   // Handle verification\r\n// //   const handleVerify = async (storedSignature, verifyingSignature) => {\r\n// //     const formData = new FormData();\r\n// //     formData.append(\"stored_signature\", storedSignature);\r\n// //     formData.append(\"verifying_signature\", verifyingSignature);\r\n\r\n// //     try {\r\n// //         const response = await fetch(\"http://localhost:3000/verify\", {\r\n// //             method: \"POST\",\r\n// //             body: formData,\r\n// //         });\r\n// //         const data = await response.json();\r\n// //         alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n// //     } catch (error) {\r\n// //         console.error(\"Error verifying signature:\", error);\r\n// //     }\r\n// // };\r\n// // const handleVerify = async () => {\r\n// //   const formData = new FormData();\r\n// //   formData.append(\"stored_signature\", image); // Use the selected image file\r\n// //   formData.append(\"verifying_signature\", image); // Assuming same image for demo\r\n\r\n// //   try {\r\n// //       const response = await fetch(\"http://127.0.0.1:5000/api/signature/verify\", {\r\n// //           method: \"POST\",\r\n// //           body: formData,\r\n// //       });\r\n// //       const data = await response.json();\r\n// //       alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n// //   } catch (error) {\r\n// //       console.log(\"Error verifying signature:\", error);\r\n// //   }\r\n// // };\r\n// router.post('/verify', async (req, res) => {\r\n//   const { accountNumber, signature } = req.body;\r\n\r\n//   try {\r\n//       // Fetch the stored signature for the account number from the database\r\n//       const storedSignatureRecord = await Signature.findOne({ accountNumber });\r\n//       if (!storedSignatureRecord) {\r\n//           return res.status(404).send({ message: 'Account not found' });\r\n//       }\r\n\r\n//       // Decode stored signature (base64) to a temporary file\r\n//       const storedSignaturePath = `temp_stored_${Date.now()}.jpg`;\r\n//       fs.writeFileSync(storedSignaturePath, Buffer.from(storedSignatureRecord.signature, 'base64'));\r\n\r\n//       // Decode verifying signature (base64) to a temporary file\r\n//       const verifyingSignaturePath = `temp_verifying_${Date.now()}.jpg`;\r\n//       fs.writeFileSync(verifyingSignaturePath, Buffer.from(signature, 'base64'));\r\n\r\n//       // Send files to Python microservice for verification\r\n//       const formData = new FormData();\r\n//       formData.append('accountNumber', accountNumber); // Optional: Send account number\r\n//       formData.append('stored_signature', fs.createReadStream(storedSignaturePath));\r\n//       formData.append('verifying_signature', fs.createReadStream(verifyingSignaturePath));\r\n\r\n//       const pythonResponse = await axios.post('http://localhost:5000/api/signature/verify', formData, {\r\n//           headers: formData.getHeaders(),\r\n//       });\r\n\r\n//       // Cleanup temporary files\r\n//       fs.unlinkSync(storedSignaturePath);\r\n//       fs.unlinkSync(verifyingSignaturePath);\r\n\r\n//       // Send verification result back to the client\r\n//       res.status(200).send(pythonResponse.data);\r\n//   } catch (err) {\r\n//       console.error(err);\r\n//       res.status(500).send({ message: 'Error during verification', error: err.message });\r\n//   }\r\n// });\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"verification-container\">\r\n//         <div className=\"verification-box\">\r\n//           <h1 className=\"verification-title\">VERIFICATION</h1>\r\n//           <p className=\"verification-message\">\r\n//             Please provide your account details and signature image for verification.\r\n//           </p>\r\n\r\n//           {/* Account Number Input */}\r\n//           <label className=\"input-label\" htmlFor=\"account-number\">\r\n//             Enter your account number:\r\n//           </label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"account-number\"\r\n//             className=\"input-field\"\r\n//             value={accountNumber}\r\n//             onChange={(e) => setAccountNumber(e.target.value)}\r\n//           />\r\n//           <button\r\n//             className=\"go-home-btn\"\r\n//             onClick={handleAccountVerification}\r\n//             disabled={!accountNumber.trim()}\r\n//           >\r\n//             Verify Account\r\n//           </button>\r\n//           {error && <p className=\"error-message\">{error}</p>}\r\n\r\n//           {/* Image Upload Field */}\r\n//           <label className=\"input-label\" htmlFor=\"signature-image\">\r\n//             Upload your signature:\r\n//           </label>\r\n//           <input\r\n//             type=\"file\"\r\n//             id=\"signature-image\"\r\n//             className=\"input-field\"\r\n//             accept=\"image/*\"\r\n//             onChange={handleImageUpload}\r\n//             disabled={!isAccountValid}\r\n//           />\r\n\r\n//           {/* Verify Button */}\r\n//           <button\r\n//             className=\"go-home-btn\"\r\n//             onClick={handleVerify}\r\n//             disabled={!isAccountValid || !image}\r\n//           >\r\n//             Verify\r\n//           </button>\r\n\r\n         \r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VerificationPage;\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './VerificationPage.css';\r\n\r\nconst VerificationPage = () => {\r\n    const [accountNumber, setAccountNumber] = useState('');\r\n    const [image, setImage] = useState(null);\r\n    const [verificationStatus, setVerificationStatus] = useState('');\r\n\r\n    const navigate = useNavigate();  // Initialize useNavigate\r\n\r\n    const handleImageUpload = (e) => {\r\n        setImage(e.target.files[0]);\r\n    };\r\n\r\n    const handleVerify = async () => {\r\n        if (!accountNumber.trim()) {\r\n            alert(\"Please provide a valid account number.\");\r\n            return;\r\n        }\r\n\r\n        if (!image) {\r\n            alert(\"Please upload a signature image.\");\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"accountNumber\", accountNumber); // Attach account number\r\n        formData.append(\"verifying_signature\", image);  // Attach the uploaded signature image\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/api/signature/verify\", {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                setVerificationStatus(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n                navigate('/verification-success');  // Navigate to a success page or another route\r\n            } else {\r\n                setVerificationStatus(`Error: ${data.error || \"Verification failed.\"}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error verifying signature:\", error);\r\n            setVerificationStatus(\"An error occurred during verification.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"verification-container\">\r\n            <div className=\"verification-box\">\r\n                <h1 className=\"verification-title\">VERIFICATION</h1>\r\n                <p className=\"verification-message\">\r\n                    Please provide your account details and signature image for verification.\r\n                </p>\r\n\r\n                <label className=\"input-label\" htmlFor=\"account-number\">\r\n                    Enter your account number:\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"account-number\"\r\n                    className=\"input-field\"\r\n                    value={accountNumber}\r\n                    onChange={(e) => setAccountNumber(e.target.value)}\r\n                />\r\n\r\n                <label className=\"input-label\" htmlFor=\"signature-image\">\r\n                    Upload your signature:\r\n                </label>\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"signature-image\"\r\n                    className=\"input-field\"\r\n                    accept=\"image/*\"\r\n                    onChange={handleImageUpload}\r\n                />\r\n\r\n                <button\r\n                    className=\"go-home-btn\"\r\n                    onClick={handleVerify}\r\n                    disabled={!accountNumber.trim() || !image}\r\n                >\r\n                    Verify\r\n                </button>\r\n\r\n                {verificationStatus && <p className=\"verification-result\">{verificationStatus}</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VerificationPage;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAMY,QAAQ,GAAGX,WAAW,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}