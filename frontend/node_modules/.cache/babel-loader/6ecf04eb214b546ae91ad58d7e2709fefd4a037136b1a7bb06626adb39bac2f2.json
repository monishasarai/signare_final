{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Monisha Sarai\\\\OneDrive\\\\Desktop\\\\project_new\\\\frontend\\\\src\\\\components\\\\VerificationPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { Link } from 'react-router-dom';\n// import './VerificationPage.css';\n\n// const VerificationPage = () => {\n//   const [accountNumber, setAccountNumber] = useState('');\n//   const [isAccountValid, setIsAccountValid] = useState(false);\n//   const [image, setImage] = useState(null);\n//   const [verificationStatus, setVerificationStatus] = useState('');\n//   const [error, setError] = useState('');\n\n//   // Function to verify account number with backend\n//   const handleAccountVerification = async () => {\n//     setError('');  // Clear previous error messages\n\n//     if (!accountNumber.trim()) {\n//       setError('Please enter a valid account number.');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:5000/api/auth/check-account', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ accountNumber }),\n//       });\n\n//       const result = await response.json();\n\n//       if (response.status === 200) {\n//         setIsAccountValid(true);\n//         setError('');  // Clear error messages on success\n//         alert(result.message); // Show success message\n//       } else {\n//         setIsAccountValid(false);\n//         setError(result.message || 'Invalid account number.');\n//       }\n//     } catch (err) {\n//       console.error('Error verifying account:', err);\n//       setError('An error occurred while verifying the account. Please try again later.');\n//     }\n//   };\n\n//   // Handle signature image upload\n//   const handleImageUpload = (e) => {\n//     setImage(e.target.files[0]);\n//   };\n\n//   // Handle verification\n// //   const handleVerify = async (storedSignature, verifyingSignature) => {\n// //     const formData = new FormData();\n// //     formData.append(\"stored_signature\", storedSignature);\n// //     formData.append(\"verifying_signature\", verifyingSignature);\n\n// //     try {\n// //         const response = await fetch(\"http://localhost:3000/verify\", {\n// //             method: \"POST\",\n// //             body: formData,\n// //         });\n// //         const data = await response.json();\n// //         alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n// //     } catch (error) {\n// //         console.error(\"Error verifying signature:\", error);\n// //     }\n// // };\n// const handleVerify = async () => {\n//   const formData = new FormData();\n//   formData.append(\"stored_signature\", image); // Use the selected image file\n//   formData.append(\"verifying_signature\", image); // Assuming same image for demo\n\n//   try {\n//       const response = await fetch(\"http://localhost:5000/api/signature/verify\", {\n//           method: \"POST\",\n//           body: formData,\n//       });\n//       const data = await response.json();\n//       alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n//   } catch (error) {\n//       console.error(\"Error verifying signature:\", error);\n//   }\n// };\n\n//   return (\n//     <div>\n//       <div className=\"verification-container\">\n//         <div className=\"verification-box\">\n//           <h1 className=\"verification-title\">VERIFICATION</h1>\n//           <p className=\"verification-message\">\n//             Please provide your account details and signature image for verification.\n//           </p>\n\n//           {/* Account Number Input */}\n//           <label className=\"input-label\" htmlFor=\"account-number\">\n//             Enter your account number:\n//           </label>\n//           <input\n//             type=\"text\"\n//             id=\"account-number\"\n//             className=\"input-field\"\n//             value={accountNumber}\n//             onChange={(e) => setAccountNumber(e.target.value)}\n//           />\n//           <button\n//             className=\"go-home-btn\"\n//             onClick={handleAccountVerification}\n//             disabled={!accountNumber.trim()}\n//           >\n//             Verify Account\n//           </button>\n//           {error && <p className=\"error-message\">{error}</p>}\n\n//           {/* Image Upload Field */}\n//           <label className=\"input-label\" htmlFor=\"signature-image\">\n//             Upload your signature:\n//           </label>\n//           <input\n//             type=\"file\"\n//             id=\"signature-image\"\n//             className=\"input-field\"\n//             accept=\"image/*\"\n//             onChange={handleImageUpload}\n//             disabled={!isAccountValid}\n//           />\n\n//           {/* Verify Button */}\n//           <button\n//             className=\"go-home-btn\"\n//             onClick={handleVerify}\n//             disabled={!isAccountValid || !image}\n//           >\n//             Verify\n//           </button>\n\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VerificationPage;\nimport React, { useState } from 'react';\nimport './VerificationPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VerificationPage = () => {\n  _s();\n  const [accountNumber, setAccountNumber] = useState('');\n  const [isAccountValid, setIsAccountValid] = useState(false);\n  const [image, setImage] = useState(null);\n  const [verificationStatus, setVerificationStatus] = useState('');\n  const [error, setError] = useState('');\n  const handleAccountVerification = async () => {\n    setError('');\n    if (!accountNumber.trim()) {\n      setError('Please enter a valid account number.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/check-account', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accountNumber\n        })\n      });\n      const result = await response.json();\n      if (response.status === 200) {\n        setIsAccountValid(true);\n        setError('');\n        alert(result.message);\n      } else {\n        setIsAccountValid(false);\n        setError(result.message || 'Invalid account number.');\n      }\n    } catch (err) {\n      console.error('Error verifying account:', err);\n      setError('An error occurred while verifying the account. Please try again later.');\n    }\n  };\n  const handleImageUpload = e => {\n    setImage(e.target.files[0]);\n  };\n  const handleVerify = async () => {\n    const formData = new FormData();\n    formData.append(\"stored_signature\", image);\n    formData.append(\"verifying_signature\", image); // You might want to use different images here\n\n    try {\n      const response = await fetch(\"http://localhost:5000/verify-signature\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json();\n      alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\n    } catch (error) {\n      console.error(\"Error verifying signature:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"verification-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"verification-title\",\n        children: \"VERIFICATION\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        htmlFor: \"account-number\",\n        children: \"Enter your account number:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"account-number\",\n        className: \"input-field\",\n        value: accountNumber,\n        onChange: e => setAccountNumber(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"go-home-btn\",\n        onClick: handleAccountVerification,\n        disabled: !accountNumber.trim(),\n        children: \"Verify Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        htmlFor: \"signature-image\",\n        children: \"Upload your signature:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"signature-image\",\n        className: \"input-field\",\n        accept: \"image/*\",\n        onChange: handleImageUpload,\n        disabled: !isAccountValid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"go-home-btn\",\n        onClick: handleVerify,\n        disabled: !isAccountValid || !image,\n        children: \"Verify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n_s(VerificationPage, \"kXSZT9n2lVeNPKREQKsy878WwNk=\");\n_c = VerificationPage;\nexport default VerificationPage;\nvar _c;\n$RefreshReg$(_c, \"VerificationPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","VerificationPage","_s","accountNumber","setAccountNumber","isAccountValid","setIsAccountValid","image","setImage","verificationStatus","setVerificationStatus","error","setError","handleAccountVerification","trim","response","fetch","method","headers","body","JSON","stringify","result","json","status","alert","message","err","console","handleImageUpload","e","target","files","handleVerify","formData","FormData","append","data","similarity","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","value","onChange","onClick","disabled","accept","_c","$RefreshReg$"],"sources":["C:/Users/Monisha Sarai/OneDrive/Desktop/project_new/frontend/src/components/VerificationPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import './VerificationPage.css';\r\n\r\n// const VerificationPage = () => {\r\n//   const [accountNumber, setAccountNumber] = useState('');\r\n//   const [isAccountValid, setIsAccountValid] = useState(false);\r\n//   const [image, setImage] = useState(null);\r\n//   const [verificationStatus, setVerificationStatus] = useState('');\r\n//   const [error, setError] = useState('');\r\n\r\n//   // Function to verify account number with backend\r\n//   const handleAccountVerification = async () => {\r\n//     setError('');  // Clear previous error messages\r\n\r\n//     if (!accountNumber.trim()) {\r\n//       setError('Please enter a valid account number.');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/api/auth/check-account', {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ accountNumber }),\r\n//       });\r\n\r\n//       const result = await response.json();\r\n\r\n//       if (response.status === 200) {\r\n//         setIsAccountValid(true);\r\n//         setError('');  // Clear error messages on success\r\n//         alert(result.message); // Show success message\r\n//       } else {\r\n//         setIsAccountValid(false);\r\n//         setError(result.message || 'Invalid account number.');\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Error verifying account:', err);\r\n//       setError('An error occurred while verifying the account. Please try again later.');\r\n//     }\r\n//   };\r\n\r\n//   // Handle signature image upload\r\n//   const handleImageUpload = (e) => {\r\n//     setImage(e.target.files[0]);\r\n//   };\r\n\r\n//   // Handle verification\r\n// //   const handleVerify = async (storedSignature, verifyingSignature) => {\r\n// //     const formData = new FormData();\r\n// //     formData.append(\"stored_signature\", storedSignature);\r\n// //     formData.append(\"verifying_signature\", verifyingSignature);\r\n\r\n// //     try {\r\n// //         const response = await fetch(\"http://localhost:3000/verify\", {\r\n// //             method: \"POST\",\r\n// //             body: formData,\r\n// //         });\r\n// //         const data = await response.json();\r\n// //         alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n// //     } catch (error) {\r\n// //         console.error(\"Error verifying signature:\", error);\r\n// //     }\r\n// // };\r\n// const handleVerify = async () => {\r\n//   const formData = new FormData();\r\n//   formData.append(\"stored_signature\", image); // Use the selected image file\r\n//   formData.append(\"verifying_signature\", image); // Assuming same image for demo\r\n\r\n//   try {\r\n//       const response = await fetch(\"http://localhost:5000/api/signature/verify\", {\r\n//           method: \"POST\",\r\n//           body: formData,\r\n//       });\r\n//       const data = await response.json();\r\n//       alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n//   } catch (error) {\r\n//       console.error(\"Error verifying signature:\", error);\r\n//   }\r\n// };\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"verification-container\">\r\n//         <div className=\"verification-box\">\r\n//           <h1 className=\"verification-title\">VERIFICATION</h1>\r\n//           <p className=\"verification-message\">\r\n//             Please provide your account details and signature image for verification.\r\n//           </p>\r\n\r\n//           {/* Account Number Input */}\r\n//           <label className=\"input-label\" htmlFor=\"account-number\">\r\n//             Enter your account number:\r\n//           </label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"account-number\"\r\n//             className=\"input-field\"\r\n//             value={accountNumber}\r\n//             onChange={(e) => setAccountNumber(e.target.value)}\r\n//           />\r\n//           <button\r\n//             className=\"go-home-btn\"\r\n//             onClick={handleAccountVerification}\r\n//             disabled={!accountNumber.trim()}\r\n//           >\r\n//             Verify Account\r\n//           </button>\r\n//           {error && <p className=\"error-message\">{error}</p>}\r\n\r\n//           {/* Image Upload Field */}\r\n//           <label className=\"input-label\" htmlFor=\"signature-image\">\r\n//             Upload your signature:\r\n//           </label>\r\n//           <input\r\n//             type=\"file\"\r\n//             id=\"signature-image\"\r\n//             className=\"input-field\"\r\n//             accept=\"image/*\"\r\n//             onChange={handleImageUpload}\r\n//             disabled={!isAccountValid}\r\n//           />\r\n\r\n//           {/* Verify Button */}\r\n//           <button\r\n//             className=\"go-home-btn\"\r\n//             onClick={handleVerify}\r\n//             disabled={!isAccountValid || !image}\r\n//           >\r\n//             Verify\r\n//           </button>\r\n\r\n         \r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VerificationPage;\r\nimport React, { useState } from 'react';\r\nimport './VerificationPage.css';\r\n\r\nconst VerificationPage = () => {\r\n  const [accountNumber, setAccountNumber] = useState('');\r\n  const [isAccountValid, setIsAccountValid] = useState(false);\r\n  const [image, setImage] = useState(null);\r\n  const [verificationStatus, setVerificationStatus] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleAccountVerification = async () => {\r\n    setError('');\r\n\r\n    if (!accountNumber.trim()) {\r\n      setError('Please enter a valid account number.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/auth/check-account', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ accountNumber }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.status === 200) {\r\n        setIsAccountValid(true);\r\n        setError('');\r\n        alert(result.message);\r\n      } else {\r\n        setIsAccountValid(false);\r\n        setError(result.message || 'Invalid account number.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error verifying account:', err);\r\n      setError('An error occurred while verifying the account. Please try again later.');\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = (e) => {\r\n    setImage(e.target.files[0]);\r\n  };\r\n\r\n  const handleVerify = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"stored_signature\", image);\r\n    formData.append(\"verifying_signature\", image); // You might want to use different images here\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/verify-signature\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n      const data = await response.json();\r\n      alert(`Result: ${data.result}\\nSimilarity: ${data.similarity}`);\r\n    } catch (error) {\r\n      console.error(\"Error verifying signature:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"verification-container\">\r\n      <div className=\"verification-box\">\r\n        <h1 className=\"verification-title\">VERIFICATION</h1>\r\n        <label className=\"input-label\" htmlFor=\"account-number\">\r\n          Enter your account number:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"account-number\"\r\n          className=\"input-field\"\r\n          value={accountNumber}\r\n          onChange={(e) => setAccountNumber(e.target.value)}\r\n        />\r\n        <button\r\n          className=\"go-home-btn\"\r\n          onClick={handleAccountVerification}\r\n          disabled={!accountNumber.trim()}\r\n        >\r\n          Verify Account\r\n        </button>\r\n        {error && <p className=\"error-message\">{error}</p>}\r\n\r\n        <label className=\"input-label\" htmlFor=\"signature-image\">\r\n          Upload your signature:\r\n        </label>\r\n        <input\r\n          type=\"file\"\r\n          id=\"signature-image\"\r\n          className=\"input-field\"\r\n          accept=\"image/*\"\r\n          onChange={handleImageUpload}\r\n          disabled={!isAccountValid}\r\n        />\r\n        <button\r\n          className=\"go-home-btn\"\r\n          onClick={handleVerify}\r\n          disabled={!isAccountValid || !image}\r\n        >\r\n          Verify\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerificationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}